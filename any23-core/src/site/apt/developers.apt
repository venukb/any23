Developers guide

 This section introduces you to some <<Any23>> fundamentals in order to quickly get you involved with the library. Two explained code snippets about how to programatically use <<Any23>> to perform some data <<conversion>> and <<extraction>> are provided.

* Data Conversion

+----------------------------------------------------------------------------------------------
/*1*/ Any23 runner = new Any23();
/*2*/ final String content = "@prefix foo: <http://example.org/ns#> .   " +
                             "@prefix : <http://other.example.org/ns#> ." +
                             "foo:bar foo: : .                          " +
                             ":bar : foo:bar .                           ";
// The second argument of StringDocumentSource() must be a valid URI.
/*3*/ DocumentSource source = new StringDocumentSource(content, "http://host.com/service");
/*4*/ ByteArrayOutputStream out = new ByteArrayOutputStream();
/*5*/ TripleHandler handler = new NTriplesWriter(out);
/*6*/ runner.extract(source, handler);
/*7*/ String n3 = out.toString("UTF-8");

+----------------------------------------------------------------------------------------------

 This example aims to demonstrate how to use <<Any23>> to perform data conversion.
 In this code we provide some input data expressed as Turtle and convert it in N3 format.

 At row 1 we define a new instance of the <<Any23>> facade, that provides all the methods 
 useful for the transformation. The facade constructor accepts a list of extractor names, if specified
 the extraction will be done only over this list, otherwise the data <MIME Type> will detected and will be applied
 all the compatible extractors declared within the <ExtractorRegistry>.

 The row 2 defines the input string containing some {{{http://www.w3.org/TeamSubmission/turtle/}Turtle}} data.

 At row 3 we instantiate a <StringDocumentSource>, specifying a content and a the source <URI>.
 The <URI> should be the source of the content data, and must be valid.

 The row 4 defines a buffered output stream that will be used to store the data produced by the
 writer declared at row 5.

 The extractor method invoked at row 6 accepts as first argument a <DocumentSource> and as second argument a <TripleHandler>,
 that will receive the sequence parsing events generated by the applied extractors. The extract method defines also another
 signature where it is possible to specify a charset encoding for the input data. If null, the charset will be
 auto detected.

 The expected output encoded at row 7 is:

+----------------------------------------------------------------------------------------------
 <http://example.org/ns#bar> <http://example.org/ns#> <http://other.example.org/ns#> .
 <http://other.example.org/ns#bar> <http://other.example.org/ns#> <http://example.org/ns#bar> .
+----------------------------------------------------------------------------------------------
