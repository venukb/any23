Index: any23-core/src/main/java/org/deri/any23/cli/Rover.java
===================================================================
--- any23-core/src/main/java/org/deri/any23/cli/Rover.java	(revisione 1414)
+++ any23-core/src/main/java/org/deri/any23/cli/Rover.java	(copia locale)
@@ -45,6 +45,7 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.io.OutputStream;
 import java.io.PrintStream;
 import java.io.PrintWriter;
 import java.net.MalformedURLException;
@@ -58,204 +59,310 @@
  *
  * @author Gabriele Renzi
  * @author Richard Cyganiak (richard@cyganiak.de)
+ * @author Michele Mostarda (mostarda@fbk.eu)
  */
 @ToolRunner.Description("Any23 Command Line Tool.")
-// TODO: this class needs a complete rewriting.
 public class Rover {
 
-    //output writer constants
-    private static final String TURTLE = "turtle";
+    // Supported formats.
+    private static final String TURTLE_FORMAT  = "turtle";
+    private static final String NQUADS_FORMAT  = "quad";
+    private static final String NTRIPLE_FORMAT = "ntriples";
+    private static final String RDFXML_FORMAT  = "rdfxml";
+    private static final String URIS_FORMAT    = "uris";
 
-    private static final String QUAD    = "quad";
+    private static final String DEFAULT_FORMAT = TURTLE_FORMAT;
 
-    private static final String NTRIPLE = "ntriples";
-
-    private static final String RDFXML  = "rdfxml";
-
-    private static final String URIS  = "uris";    
-
     private static final Logger logger = LoggerFactory.getLogger(Rover.class);
 
     private static Options options;
 
     public static void main(String[] args) {
-        options = new Options();
-        options.addOption(
-                new Option(
-                        "f",
-                        "Output format",
-                        true,
-                        "[" + TURTLE + " (default), " + NTRIPLE + ", " + RDFXML + ", " + QUAD + ", " + URIS + "]")
-        );
-        options.addOption(new Option("e", true, "comma-separated list of extractors, e.g. rdf-xml,rdf-turtle"));
-        options.addOption(new Option("o", "output", true, "output file (defaults to stdout)"));
-        options.addOption(new Option("p", "pedantic", false, "validates and fixes HTML content detecting commons issues"));
-        options.addOption(new Option("t", "notrivial", false, "filter trivial statements"));
-        options.addOption(new Option("n", "nesting", false, "disable production of nesting triples"));
-        options.addOption(new Option("s", "stats", false, "print out statistics of Any23"));
-        options.addOption(new Option("l", "log", true, "logging, please specify a file"));
-        options.addOption(new Option("v", "verbose", false, "show progress and debug information"));
-        CommandLineParser parser = new PosixParser();
-        CommandLine cmd = null;
+        new Rover().run(args);
+    }
+
+    public void run(String[] args) {
+        final CommandLineParser parser = new PosixParser();
+        final CommandLine commandLine;
+        options = createOptions();
         try {
-            cmd = parser.parse(options, args);
+            commandLine = parser.parse(options, args);
         } catch (ParseException e) {
             System.err.println(e.getMessage());
-            System.exit(-1);
+            System.exit(1);
+            throw new IllegalStateException();
         }
 
-        if (cmd.hasOption('v')) {
+        if (commandLine.hasOption('v')) {
             LogUtil.setVerboseLogging();
         } else {
             LogUtil.setDefaultLogging();
         }
 
-        if (cmd.hasOption("h")) {
+        if (commandLine.hasOption("h")) {
             printHelp();
             System.exit(0);
         }
-        if (cmd.getArgs().length != 1) {
+
+        if (commandLine.getArgs().length < 1) {
             printHelp();
             System.exit(-1);
         }
 
-        String inputURI = argumentToURI(cmd.getArgs()[0]);
+        final String[] inputURIs = argumentsToURIs(commandLine.getArgs());
 
-        String[] extractorNames = null;
-        if (cmd.hasOption('e')) {
-            extractorNames = cmd.getOptionValue('e').split(",");
+        final String[] extractorNames = getExtractors(commandLine);
+
+        PrintStream outputStream    = null;
+        TripleHandler tripleHandler = null;
+        try {
+            outputStream  = getOutputStream(commandLine);
+
+            tripleHandler = getTripleHandler(commandLine, outputStream);
+
+            tripleHandler = decorateWithLogHandler(commandLine, tripleHandler);
+
+            tripleHandler = decorateWithStatisticsHandler(commandLine, tripleHandler);
+            final BenchmarkTripleHandler benchmarkTripleHandler =
+                    tripleHandler instanceof BenchmarkTripleHandler ? (BenchmarkTripleHandler) tripleHandler : null;
+
+            tripleHandler = decorateWithAccidentalTriplesFilter(commandLine, tripleHandler);
+
+            final ReportingTripleHandler reportingTripleHandler = new ReportingTripleHandler(tripleHandler);
+
+            final ExtractionParameters eps = getExtractionParameters(commandLine);
+
+            final Any23 any23 = createAny23(extractorNames);
+
+            final long start = System.currentTimeMillis();
+            for(String inputURI : inputURIs) {
+                performExtraction(any23, eps, inputURI, reportingTripleHandler);
+            }
+            final long elapsed = System.currentTimeMillis() - start;
+
+            closeAll(tripleHandler, outputStream);
+
+            if (benchmarkTripleHandler != null) {
+                System.err.println( benchmarkTripleHandler.report() );
+            }
+
+            logger.info("Extractors used: " + reportingTripleHandler.getExtractorNames());
+            logger.info(reportingTripleHandler.getTotalTriples() + " triples, " + elapsed + "ms");
+        } finally {
+            closeAll(tripleHandler, outputStream);
         }
+    }
 
-        final PrintStream out;
-        if( cmd.hasOption("o") ) {
-            final String fileName = cmd.getOptionValue("o");
-            out = openPrintStream(fileName);
+    private Options createOptions() {
+        final Options options = new Options();
+        options.addOption(
+                new Option("v", "verbose", false, "show debug and progress information")
+        );
+        options.addOption(
+                new Option("h", "help", false, "print this help")
+        );
+        options.addOption(
+                new Option("e", true, "comma-separated list of extractors, e.g. rdf-xml,rdf-turtle")
+        );
+        options.addOption(
+                new Option("o", "output", true, "output file (defaults to standard output)")
+        );
+        options.addOption(
+                new Option(
+                        "f",
+                        "Output format",
+                        true,
+                        "[" +
+                                TURTLE_FORMAT  + " (default), " +
+                                NTRIPLE_FORMAT + ", " +
+                                RDFXML_FORMAT  + ", " +
+                                NQUADS_FORMAT  + ", " +
+                                URIS_FORMAT    +
+                        "]"
+                )
+        );
+        options.addOption(
+                new Option("t", "notrivial", false, "filter trivial statements")
+        );
+        options.addOption(
+                new Option("s", "stats", false, "print out extraction statistics")
+        );
+        options.addOption(
+                new Option("l", "log", true, "produces log within a file")
+        );
+        options.addOption(
+                new Option("p", "pedantic", false, "validate and fixes HTML content detecting commons issues")
+        );
+        options.addOption(
+                new Option("n", "nesting", false, "disable production of nesting triples")
+        );
+        return options;
+    }
+
+    private void printHelp() {
+        HelpFormatter formatter = new HelpFormatter();
+        formatter.printHelp("[{<url>|<file>}]+", options, true);
+    }
+
+    private String argumentToURI(String arg) {
+        arg = arg.trim();
+        if (arg.toLowerCase().startsWith("http:") || arg.toLowerCase().startsWith("https:")) {
+            try {
+                return new URL(arg).toString();
+            } catch (MalformedURLException ex) {
+                System.err.println("Malformed URL: " + ex + "(" + ex.getMessage() + ")");
+                System.exit(-1);
+            }
+        }
+        File f = new File(arg);
+        if (!f.exists()) {
+            System.err.println(f.toString() + ": No such file");
+            System.exit(-1);
+        }
+        if (f.isDirectory()) {
+            System.err.println(f.toString() + " is a directory");
+            System.exit(-1);
+        }
+        return f.toURI().toString();
+    }
+
+    protected String[] argumentsToURIs(String[] args) {
+        final String[] uris = new String[args.length];
+        for(int i = 0; i < args.length; i++) {
+            uris[i] = argumentToURI(args[i]);
+        }
+        return uris;
+    }
+
+    private String[] getExtractors(CommandLine cl) {
+         if (cl.hasOption('e')) {
+             return cl.getOptionValue('e').split(",");
+         }
+         return null;
+     }
+
+    private PrintStream openPrintStream(String fileName) {
+        final File file = new File(fileName);
+        try {
+            return new PrintStream(file);
+        } catch (FileNotFoundException fnfe) {
+            throw new IllegalArgumentException("Cannot open file '" + file.getAbsolutePath() + "'", fnfe);
+        }
+    }
+
+    private PrintStream getOutputStream(CommandLine cl) {
+        if (cl.hasOption("o")) {
+            final String fileName = cl.getOptionValue("o");
+            return openPrintStream(fileName);
         } else {
-            out = System.out;
+            return System.out;
         }
+    }
 
-        String format = TURTLE;
-        if (cmd.hasOption("f")) {
-            format = cmd.getOptionValue("f");
+    private TripleHandler getTripleHandler(CommandLine cl, OutputStream os) {
+        String format = DEFAULT_FORMAT;
+        if (cl.hasOption("f")) {
+            format = cl.getOptionValue("f");
         }
-        TripleHandler outputHandler;
-        if (TURTLE.equalsIgnoreCase(format)) {
-            outputHandler = new TurtleWriter(out);
-        } else if (NTRIPLE.equalsIgnoreCase(format)) {
-            outputHandler = new NTriplesWriter(out);
-        } else if (QUAD.equalsIgnoreCase(format)) {
-            outputHandler = new NQuadsWriter(out);
-        } else if (URIS.equalsIgnoreCase(format)) {
-            outputHandler = new URIListWriter(out);
+        final TripleHandler outputHandler;
+        if (TURTLE_FORMAT.equalsIgnoreCase(format)) {
+            outputHandler = new TurtleWriter(os);
+        } else if (NTRIPLE_FORMAT.equalsIgnoreCase(format)) {
+            outputHandler = new NTriplesWriter(os);
+        } else if (NQUADS_FORMAT.equalsIgnoreCase(format)) {
+            outputHandler = new NQuadsWriter(os);
+        } else if (URIS_FORMAT.equalsIgnoreCase(format)) {
+            outputHandler = new URIListWriter(os);
+        } else {
+            outputHandler = new RDFXMLWriter(os);
         }
-        else {
-            outputHandler = new RDFXMLWriter(out);
+        return outputHandler;
+    }
+
+    private TripleHandler decorateWithAccidentalTriplesFilter(CommandLine cl, TripleHandler in) {
+        if (cl.hasOption('t')) {
+            return new IgnoreAccidentalRDFa(
+                    new IgnoreTitlesOfEmptyDocuments(in),
+                    true    // suppress stylesheet triples.
+            );
         }
+        return in;
+    }
 
-        BenchmarkTripleHandler benchmark = null;
-        if (cmd.hasOption('s')) {
-            benchmark = new BenchmarkTripleHandler(outputHandler);
-            outputHandler = benchmark;
+    private TripleHandler decorateWithStatisticsHandler(CommandLine cl, TripleHandler in) {
+        if (cl.hasOption('s')) {
+            return new BenchmarkTripleHandler(in);
         }
-        if (cmd.hasOption('l')) {
-            File logFile = new File(cmd.getOptionValue('l'));
+        return in;
+    }
+
+    private TripleHandler decorateWithLogHandler(CommandLine cl, TripleHandler in) {
+        if (cl.hasOption('l')) {
+            File logFile = new File(cl.getOptionValue('l'));
             try {
-                outputHandler = new LoggingTripleHandler(outputHandler, new PrintWriter(logFile));
-            } catch (FileNotFoundException ex) {
-                System.err.println("Could not write to " + logFile + ": " + ex.getMessage());
+                return new LoggingTripleHandler(in, new PrintWriter(logFile));
+            } catch (FileNotFoundException fnfe) {
+                System.err.println( String.format("Could not write to log file [%s]", logFile) );
+                fnfe.printStackTrace(System.err);
                 System.exit(1);
+                throw new IllegalStateException();
             }
         }
-        ReportingTripleHandler reporter = new ReportingTripleHandler(outputHandler);
-        outputHandler = reporter;
-        if (cmd.hasOption('t')) {
-            outputHandler = new IgnoreAccidentalRDFa(
-                    new IgnoreTitlesOfEmptyDocuments(outputHandler),
-                    true // suppress stylesheet triples.
-            );
-        }
+        return in;
+    }
 
-        final boolean nestingDisabled = !cmd.hasOption('n');
-
-        final ExtractionParameters eps =
-                cmd.hasOption('p')
+    private ExtractionParameters getExtractionParameters(CommandLine cl) {
+        final boolean nestingDisabled = ! cl.hasOption('n');
+        return
+                cl.hasOption('p')
                         ?
                 new ExtractionParameters(ValidationMode.ValidateAndFix, nestingDisabled)
                         :
                 new ExtractionParameters(ValidationMode.None          , nestingDisabled);
+    }
 
-        long start = System.currentTimeMillis();
-        Any23 any23 = (extractorNames == null || extractorNames.length == 0) ? new Any23() : new Any23(extractorNames);
+    private Any23 createAny23(String[] extractorNames) {
+        Any23 any23 = (extractorNames == null || extractorNames.length == 0)
+                ? new Any23()
+                : new Any23(extractorNames);
         any23.setHTTPUserAgent(Any23.DEFAULT_HTTP_CLIENT_USER_AGENT + "/" + Any23.VERSION);
+        return any23;
+    }
+
+    private void performExtraction(
+            Any23 any23, ExtractionParameters eps, String target, TripleHandler th
+    ) {
         try {
-            if ( ! any23.extract(eps, inputURI, outputHandler).hasMatchingExtractors() ) {
-                System.err.println("No suitable extractors");
+            if (! any23.extract(eps, target, th).hasMatchingExtractors()) {
+                System.err.println("No suitable extractors found.");
                 System.exit(2);
             }
         } catch (ExtractionException ex) {
-            logger.debug("Exception in Any23", ex);
+            logger.debug("Exception while extracting metadata.", ex);
             System.err.println(ex.getMessage());
             ex.printStackTrace(System.err);
             System.exit(3);
         } catch (IOException ex) {
-            logger.debug("Exception in Any23", ex);
+            logger.debug("Exception while producing output.", ex);
             System.err.println(ex.getMessage());
             System.exit(4);
         }
-
-        try {
-            outputHandler.close();
-        } catch (TripleHandlerException e) {
-            logger.debug("Exception in Any23", e);
-            System.err.println(e.getMessage());
-            System.exit(4);
-        }
-
-        out.close();
-
-        if (benchmark != null) {
-            System.err.println(benchmark.report());
-        }
-
-        logger.debug("Extractors used: " + reporter.getExtractorNames());
-        long elapsed = System.currentTimeMillis() - start;
-        logger.info(reporter.getTotalTriples() + " triples, " + elapsed + "ms");
     }
 
-    private static PrintStream openPrintStream(String fileName) {
-        final File file = new File(fileName);
+    private void closeHandler(TripleHandler th) {
+        if(th == null) return;
         try {
-            return new PrintStream(file);
-        } catch (FileNotFoundException fnfe) {
-            throw new IllegalArgumentException("Cannot open file '" + file.getAbsolutePath() + "'", fnfe);
+            th.close();
+        } catch (TripleHandlerException the) {
+            logger.debug("Error while closing TripleHandler", the);
+            the.printStackTrace( System.err );
+            System.exit(5);
         }
     }
 
-    private static void printHelp() {
-        HelpFormatter formatter = new HelpFormatter();
-        formatter.printHelp("{<url>|<file>}", options, true);
+    private void closeAll(TripleHandler th, PrintStream os) {
+             closeHandler(th);
+            if(os != null) os.close();
     }
 
-    private static String argumentToURI(String arg) {
-        arg = arg.trim();
-        if (arg.toLowerCase().startsWith("http:") || arg.toLowerCase().startsWith("https:")) {
-            try {
-                return new URL(arg).toString();
-            } catch (MalformedURLException ex) {
-                System.err.println("Malformed URL: " + ex + "(" + ex.getMessage() + ")");
-                System.exit(-1);
-            }
-        }
-        File f = new File(arg);
-        if (!f.exists()) {
-            System.err.println(f.toString() + ": No such file");
-            System.exit(-1);
-        }
-        if (f.isDirectory()) {
-            System.err.println(f.toString() + " is a directory");
-            System.exit(-1);
-        }
-        return f.toURI().toString();
-    }
-    
 }
Index: any23-core/src/main/java/org/deri/any23/Any23.java
===================================================================
--- any23-core/src/main/java/org/deri/any23/Any23.java	(revisione 1414)
+++ any23-core/src/main/java/org/deri/any23/Any23.java	(copia locale)
@@ -40,7 +40,6 @@
 import org.deri.any23.source.MemCopyFactory;
 import org.deri.any23.source.StringDocumentSource;
 import org.deri.any23.writer.TripleHandler;
-import org.deri.any23.writer.TripleHandlerException;
 
 import java.io.File;
 import java.io.IOException;
@@ -277,11 +276,15 @@
         ex.setLocalCopyFactory(streamCache);
         ex.setParserEncoding(encoding);
         final SingleDocumentExtractionReport sder = ex.run(eps);
+        // TODO: REMOVE ME (This causes 5 test failures) {
+        /*
         try {
             outputHandler.close();
         } catch (TripleHandlerException e) {
             throw new ExtractionException("Error closing the triple handler", e);
         }
+        */
+        // TODO: }
         return new ExtractionReport(
                 ex.getMatchingExtractors(),
                 ex.getParserEncoding(),
Index: any23-core/src/main/java/org/deri/any23/writer/LoggingTripleHandler.java
===================================================================
--- any23-core/src/main/java/org/deri/any23/writer/LoggingTripleHandler.java	(revisione 1414)
+++ any23-core/src/main/java/org/deri/any23/writer/LoggingTripleHandler.java	(copia locale)
@@ -50,6 +50,8 @@
         }
         underlyingHandler = tripleHandler;
         this.destination = destination;
+
+        printHeader(destination);
     }
 
     public void startDocument(URI documentURI) throws TripleHandlerException {
@@ -84,7 +86,8 @@
         underlyingHandler.receiveNamespace(prefix, uri, context);
     }
 
-    public void endDocument(URI documentURI) {
+    public void endDocument(URI documentURI) throws TripleHandlerException {
+        underlyingHandler.endDocument(documentURI);
         long elapsedTime = System.currentTimeMillis() - startTime;
         boolean success = true;
         StringBuffer sb = new StringBuffer("[");
@@ -102,6 +105,11 @@
     }
 
     public void setContentLength(long contentLength) {
+        underlyingHandler.setContentLength(contentLength);
         this.contentLength = contentLength;
     }
+
+    private void printHeader(PrintWriter writer) {
+        writer.println("# Document-URI\tContent-Length\tElapsed-Time\tSuccess\tExtractors");
+    }
 }
\ No newline at end of file
Index: any23-core/src/main/java/org/deri/any23/writer/BenchmarkTripleHandler.java
===================================================================
--- any23-core/src/main/java/org/deri/any23/writer/BenchmarkTripleHandler.java	(revisione 1414)
+++ any23-core/src/main/java/org/deri/any23/writer/BenchmarkTripleHandler.java	(copia locale)
@@ -135,7 +135,7 @@
     }
 
     public void setContentLength(long contentLength) {
-        // Empty.
+        underlyingHandler.setContentLength(contentLength);
     }
 
     /**
