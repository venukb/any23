package org.deri.any23.vocab;

 
import java.util.HashMap;
import java.util.Map;

import com.hp.hpl.jena.rdf.model.*;
 
/**
 * Vocabulary definitions from ical.rdf 
 * @author Auto-generated by schemagen on 23 mag 2008 15:28 
 */
public class ICAL {
	private static final Map<String,Resource> localNamesMap = new HashMap<String,Resource>(10);

    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static Model m_model = ModelFactory.createDefaultModel();
        
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.w3.org/2002/12/cal/icaltzd#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = createResource( NS );
    
    public static final Resource DomainOf_rrule = createResource( "DomainOf_rrule" );
    
    public static final Resource List_of_Float = createResource( "List_of_Float" );
    
    /** <p>Provide a grouping of component properties that define an alarm.</p> */
    public static final Resource Valarm = createResource( "Valarm" );
    
    public static final Resource Value_CAL_ADDRESS = createResource( "Value_CAL-ADDRESS" );
    
    public static final Resource Value_DATE = createResource( "Value_DATE" );
    
    public static final Resource Value_DURATION = createResource( "Value_DURATION" );
    
    public static final Resource Value_PERIOD = createResource( "Value_PERIOD" );
    
    public static final Resource Value_RECUR = createResource( "Value_RECUR" );
    
    public static final Resource Vcalendar = createResource( "Vcalendar" );
    
    /** <p>Provide a grouping of component properties that describe an event.</p> */
    public static final Resource Vevent = createResource( "Vevent" );
    
    /** <p>Provide a grouping of component properties that describe either a request 
     *  for free/busy time, describe a response to a request for free/busy time or 
     *  describe a published set of busy time.</p>
     */
    public static final Resource Vfreebusy = createResource( "Vfreebusy" );
    
    /** <p>Provide a grouping of component properties that describe a journal entry.</p> */
    public static final Resource Vjournal = createResource( "Vjournal" );
    
    /** <p>Provide a grouping of component properties that defines a time zone.</p> */
    public static final Resource Vtimezone = createResource( "Vtimezone" );
    
    /** <p>Provide a grouping of calendar properties that describe a to-do.</p> */
    public static final Resource Vtodo = createResource( "Vtodo" );
    
    
    /** <p>The property provides the capability to associate a document object with a 
     *  calendar component.default value type: URI</p>
     */
    public static final Property attach = createProperty("attach" );
    
    /** <p>The property defines an "Attendee" within a calendar component.value type: 
     *  CAL-ADDRESS</p>
     */
    public static final Property attendee = createProperty("attendee" );
    
    public static final Property calAddress = createProperty("calAddress" );
    
    public static final Property component = createProperty("component" );
    
    public static final Property daylight = createProperty("daylight" );
    
    /** <p>The property specifies a positive duration of time.value type: DURATION</p> */
    public static final Property duration = createProperty("duration" );
    
    /** <p>This property defines a rule or repeating pattern for an exception to a recurrence 
     *  set.value type: RECUR</p>
     */
    public static final Property exrule = createProperty("exrule" );
    
    /** <p>The property defines one or more free or busy time intervals.value type: PERIOD</p> */
    public static final Property freebusy = createProperty("freebusy" );
    
    /** <p>value type: list of FLOATThis property specifies information related to the 
     *  global position for the activity specified by a calendar component.</p>
     */
    public static final Property geo = createProperty("geo" );
    
    /** <p>value type: CAL-ADDRESSThe property defines the organizer for a calendar component.</p> */
    public static final Property organizer = createProperty("organizer" );
    
    /** <p>This property defines a rule or repeating pattern for recurring events, to-dos, 
     *  or time zone definitions.value type: RECUR</p>
     */
    public static final Property rrule = createProperty("rrule" );
    
    public static final Property standard = createProperty("standard" );
    
    /** <p>This property specifies when an alarm will trigger.default value type: DURATION</p> */
    public static final Property trigger = createProperty("trigger" );
    
    /** <p>The TZURL provides a means for a VTIMEZONE component to point to a network 
     *  location that can be used to retrieve an up-to- date version of itself.value 
     *  type: URI</p>
     */
    public static final Property tzurl = createProperty("tzurl" );
    
    /** <p>This property defines a Uniform Resource Locator (URL) associated with the 
     *  iCalendar object.value type: URI</p>
     */
    public static final Property url = createProperty("url" );
    
    /** <p>value type: TEXTThis class of property provides a framework for defining non-standard 
     *  properties.</p>
     */
    public static final Property X_ = createProperty("X-" );
    
    /** <p>value type: TEXTThis property defines the action to be invoked when an alarm 
     *  is triggered.</p>
     */
    public static final Property action = createProperty("action" );
    
    /** <p>To specify an alternate text representation for the property value.</p> */
    public static final Property altrep = createProperty("altrep" );
    
    public static final Property byday = createProperty("byday" );
    
    public static final Property byhour = createProperty("byhour" );
    
    public static final Property byminute = createProperty("byminute" );
    
    public static final Property bymonth = createProperty("bymonth" );
    
    public static final Property bysecond = createProperty("bysecond" );
    
    public static final Property bysetpos = createProperty("bysetpos" );
    
    public static final Property byweekno = createProperty("byweekno" );
    
    public static final Property byyearday = createProperty("byyearday" );
    
    /** <p>value type: TEXTThis property defines the calendar scale used for the calendar 
     *  information specified in the iCalendar object.</p>
     */
    public static final Property calscale = createProperty("calscale" );
    
    /** <p>value type: TEXTThis property defines the categories for a calendar component.</p> */
    public static final Property categories = createProperty("categories" );
    
    /** <p>value type: TEXTThis property defines the access classification for a calendar 
     *  component.</p>
     */
    public static final Property class_ = createProperty("class" );
    
    /** <p>To specify the common name to be associated with the calendar user specified 
     *  by the property.</p>
     */
    public static final Property cn = createProperty("cn" );
    
    /** <p>value type: TEXTThis property specifies non-processing information intended 
     *  to provide a comment to the calendar user.</p>
     */
    public static final Property comment = createProperty("comment" );
    
    /** <p>value type: DATE-TIMEThis property defines the date and time that a to-do 
     *  was actually completed.</p>
     */
    public static final Property completed = createProperty("completed" );
    
    /** <p>value type: TEXTThe property is used to represent contact information or alternately 
     *  a reference to contact information associated with the calendar component.</p>
     */
    public static final Property contact = createProperty("contact" );
    
    public static final Property count = createProperty("count" );
    
    /** <p>This property specifies the date and time that the calendar information was 
     *  created by the calendar user agent in the calendar store. Note: This is analogous 
     *  to the creation date and time for a file in the file system.value type: DATE-TIME</p>
     */
    public static final Property created = createProperty("created" );
    
    /** <p>To specify the type of calendar user specified by the property.</p> */
    public static final Property cutype = createProperty("cutype" );
    
    /** <p>To specify the calendar users that have delegated their participation to the 
     *  calendar user specified by the property.</p>
     */
    public static final Property delegatedFrom = createProperty("delegatedFrom" );
    
    /** <p>To specify the calendar users to whom the calendar user specified by the property 
     *  has delegated participation.</p>
     */
    public static final Property delegatedTo = createProperty("delegatedTo" );
    
    /** <p>value type: TEXTThis property provides a more complete description of the 
     *  calendar component, than that provided by the "SUMMARY" property.</p>
     */
    public static final Property description = createProperty("description" );
    
    /** <p>To specify reference to a directory entry associated with the calendar user 
     *  specified by the property.</p>
     */
    public static final Property dir = createProperty("dir" );
    
    /** <p>This property specifies the date and time that a calendar component ends.default 
     *  value type: DATE-TIME</p>
     */
    public static final Property dtend = createProperty("dtend" );
    
    /** <p>value type: DATE-TIMEThe property indicates the date/time that the instance 
     *  of the iCalendar object was created.</p>
     */
    public static final Property dtstamp = createProperty("dtstamp" );
    
    /** <p>default value type: DATE-TIMEThis property specifies when the calendar component 
     *  begins.</p>
     */
    public static final Property dtstart = createProperty("dtstart" );
    
    /** <p>default value type: DATE-TIMEThis property defines the date and time that 
     *  a to-do is expected to be completed.</p>
     */
    public static final Property due = createProperty("due" );
    
    /** <p>To specify an alternate inline encoding for the property value.</p> */
    public static final Property encoding = createProperty("encoding" );
    
    /** <p>default value type: DATE-TIMEThis property defines the list of date/time exceptions 
     *  for a recurring calendar component.</p>
     */
    public static final Property exdate = createProperty("exdate" );
    
    /** <p>To specify the free or busy time type.</p> */
    public static final Property fbtype = createProperty("fbtype" );
    
    /** <p>To specify the content type of a referenced object.</p> */
    public static final Property fmttype = createProperty("fmttype" );
    
    public static final Property freq = createProperty("freq" );
    
    public static final Property interval = createProperty("interval" );
    
    /** <p>To specify the language for text values in a property or property parameter.</p> */
    public static final Property language = createProperty("language" );
    
    /** <p>value type: DATE-TIMEThe property specifies the date and time that the information 
     *  associated with the calendar component was last revised in the calendar store. 
     *  Note: This is analogous to the modification date and time for a file in the 
     *  file system.</p>
     */
    public static final Property lastModified = createProperty("lastModified" );
    
    /** <p>value type: TEXTThe property defines the intended venue for the activity defined 
     *  by a calendar component.</p>
     */
    public static final Property location = createProperty("location" );
    
    /** <p>To specify the group or list membership of the calendar user specified by 
     *  the property.</p>
     */
    public static final Property member = createProperty("member" );
    
    /** <p>value type: TEXTThis property defines the iCalendar object method associated 
     *  with the calendar object.</p>
     */
    public static final Property method = createProperty("method" );
    
    /** <p>To specify the participation status for the calendar user specified by the 
     *  property.</p>
     */
    public static final Property partstat = createProperty("partstat" );
    
    /** <p>value type: INTEGERThis property is used by an assignee or delegatee of a 
     *  to-do to convey the percent completion of a to-do to the Organizer.</p>
     */
    public static final Property percentComplete = createProperty("percentComplete" );
    
    /** <p>The property defines the relative priority for a calendar component.value 
     *  type: INTEGER</p>
     */
    public static final Property priority = createProperty("priority" );
    
    /** <p>value type: TEXTThis property specifies the identifier for the product that 
     *  created the iCalendar object.</p>
     */
    public static final Property prodid = createProperty("prodid" );
    
    /** <p>To specify the effective range of recurrence instances from the instance specified 
     *  by the recurrence identifier specified by the property.</p>
     */
    public static final Property range = createProperty("range" );
    
    /** <p>default value type: DATE-TIMEThis property defines the list of date/times 
     *  for a recurrence set.</p>
     */
    public static final Property rdate = createProperty("rdate" );
    
    /** <p>default value type: DATE-TIMEThis property is used in conjunction with the 
     *  "UID" and "SEQUENCE" property to identify a specific instance of a recurring 
     *  "VEVENT", "VTODO" or "VJOURNAL" calendar component. The property value is 
     *  the effective value of the "DTSTART" property of the recurrence instance.</p>
     */
    public static final Property recurrenceId = createProperty("recurrenceId" );
    
    /** <p>To specify the relationship of the alarm trigger with respect to the start 
     *  or end of the calendar component.</p>
     */
    public static final Property related = createProperty("related" );
    
    /** <p>The property is used to represent a relationship or reference between one 
     *  calendar component and another.value type: TEXT</p>
     */
    public static final Property relatedTo = createProperty("relatedTo" );
    
    /** <p>To specify the type of hierarchical relationship associated with the calendar 
     *  component specified by the property.</p>
     */
    public static final Property reltype = createProperty("reltype" );
    
    /** <p>This property defines the number of time the alarm should be repeated, after 
     *  the initial trigger.value type: INTEGER</p>
     */
    public static final Property repeat = createProperty("repeat" );
    
    /** <p>value type: TEXTThis property defines the status code returned for a scheduling 
     *  request.</p>
     */
    public static final Property requestStatus = createProperty("requestStatus" );
    
    /** <p>value type: TEXTThis property defines the equipment or resources anticipated 
     *  for an activity specified by a calendar entity..</p>
     */
    public static final Property resources = createProperty("resources" );
    
    /** <p>To specify the participation role for the calendar user specified by the property.</p> */
    public static final Property role = createProperty("role" );
    
    /** <p>To specify whether there is an expectation of a favor of a reply from the 
     *  calendar user specified by the property value.</p>
     */
    public static final Property rsvp = createProperty("rsvp" );
    
    /** <p>To specify the calendar user that is acting on behalf of the calendar user 
     *  specified by the property.</p>
     */
    public static final Property sentBy = createProperty("sentBy" );
    
    /** <p>value type: integerThis property defines the revision sequence number of the 
     *  calendar component within a sequence of revisions.</p>
     */
    public static final Property sequence = createProperty("sequence" );
    
    /** <p>value type: TEXTThis property defines the overall status or confirmation for 
     *  the calendar component.</p>
     */
    public static final Property status = createProperty("status" );
    
    /** <p>This property defines a short summary or subject for the calendar component.value 
     *  type: TEXT</p>
     */
    public static final Property summary = createProperty("summary" );
    
    /** <p>This property defines whether an event is transparent or not to busy time 
     *  searches.value type: TEXT</p>
     */
    public static final Property transp = createProperty("transp" );
    
    /** <p>value type: TEXTTo specify the identifier for the time zone definition for 
     *  a time component in the property value.This property specifies the text value 
     *  that uniquely identifies the "VTIMEZONE" calendar component.</p>
     */
    public static final Property tzid = createProperty("tzid" );
    
    /** <p>value type: TEXTThis property specifies the customary designation for a time 
     *  zone description.</p>
     */
    public static final Property tzname = createProperty("tzname" );
    
    /** <p>value type: UTC-OFFSETThis property specifies the offset which is in use prior 
     *  to this time zone observance.</p>
     */
    public static final Property tzoffsetfrom = createProperty("tzoffsetfrom" );
    
    /** <p>value type: UTC-OFFSETThis property specifies the offset which is in use in 
     *  this time zone observance.</p>
     */
    public static final Property tzoffsetto = createProperty("tzoffsetto" );
    
    /** <p>This property defines the persistent, globally unique identifier for the calendar 
     *  component.value type: TEXT</p>
     */
    public static final Property uid = createProperty("uid" );
    
    public static final Property until = createProperty("until" );
    
    /** <p>value type: TEXTThis property specifies the identifier corresponding to the 
     *  highest version number or the minimum and maximum range of the iCalendar specification 
     *  that is required in order to interpret the iCalendar object.</p>
     */
    public static final Property version = createProperty("version" );

    public static Resource getResource(String name) {
    	Resource res = localNamesMap.get(name);
    	if (null==res) 
    		throw new RuntimeException("heck, you are using a non existing resource:"+name);
    	return res;
    }

	private static Resource createResource(String string) {
		Resource res = m_model.createResource("http://www.w3.org/2002/12/cal/icaltzd#"+string);
		localNamesMap.put(string, res);
		return res;
	}

	private static Property createProperty(String string) {
		Property res = m_model.createProperty("http://www.w3.org/2002/12/cal/icaltzd#"+string);
		localNamesMap.put(string, res);
		return res;
	}

	public static Property getProperty(String name) {
		return (Property) getResource(name);
	}
	
	
}
